global:
  cloudOrigin: "azure" # possible valulues: azure, aws, gcp, alibaba, digitalocean, oci, openstack, ibmcloud

# https://open-policy-agent.github.io/gatekeeper-library/website/validation/privileged-containers/
privilegedContainer:
  enabled: true
  excludedNamespaces: ["kube-system", "default"]
  exemptImages: []

# https://open-policy-agent.github.io/gatekeeper-library/website/validation/host-namespaces/
hostNamespace:
  enabled: true
  excludedNamespaces: []

# https://open-policy-agent.github.io/gatekeeper-library/website/validation/allow-privilege-escalation
privilegeEscalationContainer:
  enabled: true
  exemptImages: []

# https://open-policy-agent.github.io/gatekeeper-library/website/validation/host-filesystem
hostFilesystem:
  enabled: true
  allowedHostPaths: []
    # - readOnly: true
    #   pathPrefix: "/tmp"

# https://open-policy-agent.github.io/gatekeeper-library/website/validation/read-only-root-filesystem
readOnlyRootFilesystem:
  enabled: true
  exemptImages: []

# https://open-policy-agent.github.io/gatekeeper-library/website/validation/allowedrepos
allowedRepositories:
  enabled: true
  repos: ["registry.k8s.io/", "nginx"]
  excludedNamespaces: ["kube-system"]

# https://open-policy-agent.github.io/gatekeeper-library/website/validation/automount-serviceaccount-token
automountServiceAccountTokenForPod:
  enabled: true
  excludedNamespaces: ["kube-system"]

# https://open-policy-agent.github.io/gatekeeper-library/website/validation/block-endpoint-edit-default-role
BlockEndpointEditDefaultRole:
  enabled: true

# https://open-policy-agent.github.io/gatekeeper-library/website/validation/block-nodeport-services
BlockNodePort:
  enabled: true

# https://open-policy-agent.github.io/gatekeeper-library/website/validation/block-wildcard-ingress
BlockWildcardIngress:
  enabled: true

# https://open-policy-agent.github.io/gatekeeper-library/website/validation/containerresources
RequiredResources:
  enabled: true
  limits: ["cpu","memory"]
  requests: ["cpu","memory"]

# https://open-policy-agent.github.io/gatekeeper-library/website/validation/disallowanonymous
DisallowAnonymousAccess:
  enabled: true
  allowedRoles: ["cluster-role-1"]

# https://open-policy-agent.github.io/gatekeeper-library/website/validation/disallowedtags
DisallowTags:
  enabled: true
  tags: ["latest"]
  exemptImages: []

# https://open-policy-agent.github.io/gatekeeper-library/website/validation/ephemeralstoragelimit
ContainerEphemeralStorageLimit:
  enabled: true
  ephemeralStorage: "500Mi"
  exemptImages: []

# https://open-policy-agent.github.io/gatekeeper-library/website/validation/externalip
ExternalIps:
  enabled: true
  allowedIPs: []

# https://open-policy-agent.github.io/gatekeeper-library/website/validation/replicalimits
ReplicaLimits:
  enabled: true
  ranges:
    - min_replicas: 2
      max_replicas: 50

# https://open-policy-agent.github.io/gatekeeper-library/website/validation/storageclass
StorageClass:
  enabled: true
  includeStorageClassesInMessage: true
  allowedStorageClasses: []

SvcLoadbalancerAnnotations:
  enabled: true

DisallowRoot:
  enabled: true
  exemptImages: []

# https://open-policy-agent.github.io/gatekeeper-library/website/validation/fsgroup
fsGroup:
  enabled: false
  rule : ["MayRunAs"]
  ranges: 
   - min: 1
     max: 1000

# https://open-policy-agent.github.io/gatekeeper-library/website/validation/capabilities
capabilities:
  enabled: false
  includeNamespaces: ["default"]
  allowedCapabilities: []
  requiredDropCapabilities: []

# https://open-policy-agent.github.io/gatekeeper-library/website/validation/disallowedrepos
DisallowedRepositories:
  enabled: false
  repos: ["k8s.gcr.io/"]

# https://open-policy-agent.github.io/gatekeeper-library/website/validation/horizontalpodautoscaler
HorizontalPodAutoscaler:
  enabled: false
  minimumReplicaSpread: 1
  enforceScaleTargetRef: true
  ranges:
    - min_replicas: 3
      max_replicas: 6

# https://open-policy-agent.github.io/gatekeeper-library/website/validation/httpsonly
IngressHttpsOnly:
  enabled: false
  tlsOptional: true

# https://open-policy-agent.github.io/gatekeeper-library/website/validation/imagedigests
ImageDigests:
  enabled: false
  namespaces: ["default"]

# https://open-policy-agent.github.io/gatekeeper-library/website/validation/poddisruptionbudget
PodDisruptionBudget:
  enabled: false
  kinds:
    - apiGroups: ["apps"]
      kinds: ["Deployment", "StatefulSet"]
    - apiGroups: ["policy"]
      kinds: ["PodDisruptionBudget"]
    - apiGroups: [""]
      kinds: ["ReplicationController"]

# https://open-policy-agent.github.io/gatekeeper-library/website/validation/requiredannotations
RequiredAnnotations:
  enabled: false
  message: "All services must have a `a8r.io/owner` and `a8r.io/runbook` annotations."
  annotations:
    - key: a8r.io/owner
      # Matches email address or github user
      allowedRegex: ^([A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}|[a-z]{1,39})$
    - key: a8r.io/runbook
      # Matches urls including or not http/https
      allowedRegex: ^(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)?[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$

# https://open-policy-agent.github.io/gatekeeper-library/website/validation/requiredprobes
RequiredProbes:
  enabled: false
  probes: ["readinessProbe", "livenessProbe"]
  probeTypes: ["tcpSocket", "httpGet", "exec"]

# https://open-policy-agent.github.io/gatekeeper-library/website/validation/requiredlabels
RequiredLabels:
  enabled: false
  message: "All namespaces must have an `owner` label that points to your company username"
  labels:
    - key: owner
      allowedRegex: "^[a-zA-Z]+.agilebank.demo$"

# Falco is a cloud native security tool that provides runtime security across hosts, containers, Kubernetes, and cloud environments. It leverages custom rules on Linux kernel events and other data sources through plugins, enriching event data with contextual metadata to deliver real-time alerts. Falco enables the detection of abnormal behavior, potential security threats, and compliance violations.
falco:
  containerSecurityContext: {}

  resources:
    requests:
      cpu: 100m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 1024Mi

  # Collectors for data enrichment (scenario requirement)
  collectors:
    enabled: true
    
    docker:
      enabled: false

    crio:
      enabled: false

    containerd:
      enabled: true
      socket: /var/run/containerd/containerd.sock

  customRules:
    override-rules.yaml: |-

      - list: known_namespaces_privilege_containers_list
        items: ["falco", "kube-system"]

      - macro: known_namespaces_privilege_containers
        condition: (k8s.ns.name in (known_namespaces_privilege_containers_list))

      - rule: Fileless execution via memfd_create
        desc: >
          Detect if a binary is executed from memory using the memfd_create technique. This is a well-known defense evasion 
          technique for executing malware on a victim machine without storing the payload on disk and to avoid leaving traces 
          about what has been executed.
        condition: >
          spawned_process
          and proc.is_exe_from_memfd=true
          and proc.sname != containerd
        output: (CUSTOM) Fileless execution via memfd_create (container_start_ts=%container.start_ts proc_cwd=%proc.cwd evt_res=%evt.res proc_sname=%proc.sname gparent=%proc.aname[2] evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)
        priority: CRITICAL
        tags: [maturity_stable, host, container, process, mitre_defense_evasion, T1620]

      - rule: Container running in Privileged mode
        desc: > 
          Detect containers running in privilege mode.
        condition: >
          spawned_process
          and container
          and container.privileged=true
          and not known_namespaces_privilege_containers
        output: Privileged container has been started! (evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags ns=%k8s.ns.name %container.info)
        priority: CRITICAL
        tags: [maturity_stable, container, cis, process, mitre_privilege_escalation, T1611]

  # UI to visualise threats alerts
  falcosidekick:
    enabled: true
    webui: 
      enabled: true

  serviceMonitor:
    create: false
    path: /metrics
    labels: {}
    selector: {}
    interval: 15s
    scheme: http
    tlsConfig: {}
    scrapeTimeout: 10s
    relabelings: []
    targetLabels: []
    endpointPort: "metrics"

  falco:
    rules_files:
      - /etc/falco/falco_rules.yaml
      - /etc/falco/falco_rules.local.yaml
      - /etc/falco/rules.d